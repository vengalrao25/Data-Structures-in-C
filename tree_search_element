
#include <stdio.h>
#include<malloc.h>
struct node 
{
    int data ;
    struct node * left;
    struct node * right;
};



struct node * createNode( int val)
{
    struct node * l = malloc(sizeof(struct node ));
    l->data = val ;
    l->left =NULL;
    l->right =NULL;
    return l;
}





void prin(struct node *head)
{
    if (head!=NULL)
    {
        printf("%d " ,head->data);
        prin(head->left);
        
        prin(head->right);
    }
    
}




int search(struct node *ptr , int val)
{
   
   if(ptr){
       if (ptr->data == val )
    {
        return val ; 
    }
    else
    {
        search(ptr->left,val);
        search(ptr->right,val);
    }
       
   }
}


int bstsearch(struct node *root , int val)
{
    while(root!=NULL)
    {
        if (root->data == val)
        {
            return val ; 
        }
        else if (root->data >val)
        {
            root = root->left ;
        }
        else
        {
            root = root->right ; 
        }
    }
}


int main(){
     
    // Constructing the root node - Using Function (Recommended)
    struct node *p = createNode(5);
    struct node *p1 = createNode(3);
    struct node *p2 = createNode(6);
    struct node *p3 = createNode(1);
    struct node *p4 = createNode(4);
    // Finally The tree looks like this:
    //      5
    //     / \
    //    3   6
    //   / \
    //  1   4  

   
    p->left = p1;
    p->right = p2;
    p1->left = p3;
    p1->right = p4;
    
    
   // prin(p);
printf("\n");

int o = bstsearch(p , 3);
if (o)
{
    printf("%d is found . its available \n");
}
else
{
    printf("%d data not found \n");
}



return  0 ;
}
